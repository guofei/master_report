<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctypes | Master Report]]></title>
  <link href="http://guofei.github.com/master_report/blog/categories/ctypes/atom.xml" rel="self"/>
  <link href="http://guofei.github.com/master_report/"/>
  <updated>2013-03-06T02:04:01+09:00</updated>
  <id>http://guofei.github.com/master_report/</id>
  <author>
    <name><![CDATA[kaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[暗号化]]></title>
    <link href="http://guofei.github.com/master_report/blog/2012/09/24/an-hao-hua/"/>
    <updated>2012-09-24T16:21:00+09:00</updated>
    <id>http://guofei.github.com/master_report/blog/2012/09/24/an-hao-hua</id>
    <content type="html"><![CDATA[<h3>javascriptでの暗号化</h3>

<p>前は文字列を渡して暗号化を行う
<code>c
char* private_decrypt(const char *prikey, int key_len, const char *from, int from_len);
char* public_encrypt(const char *pubkey, int key_len, const char *from, int from_len);
</code></p>

<p>ファイル名を指定して、暗号化を行う。
<code>c
char* public_encrypt(const char *file, const char *from, int data_len);
char* private_decrypt(const char *file, const char *from, int data_len);
</code></p>

<p>```c
typedef enum { PRIVATE_KEY , PUBLIC_KEY } KeyType;</p>

<p>RSA <em>read_rsa_key_from_file(const char </em>file, KeyType type)
{</p>

<pre><code>    FILE *fp = fopen(file, "r");
    if(fp == NULL){
            perror(file);
            return NULL;
    }

    RSA *key;
    if(type == PUBLIC_KEY)
            key = PEM_read_RSAPublicKey(fp, NULL, NULL, NULL);
    else if(type == PRIVATE_KEY)
            key = PEM_read_RSAPrivateKey(fp, NULL, NULL, NULL);

    fclose(fp);

    if(key == NULL){
            fprintf(stderr, "failed to read key");
            return NULL;
    }

    return key;
</code></pre>

<p>}</p>

<p>void free_rsa_key(RSA *key)
{</p>

<pre><code>    RSA_free(key);
</code></pre>

<p>}</p>

<p>int generate_rsa_key_to_file(const char *path, int size)
{</p>

<pre><code>    RSA *key = RSA_generate_key(size, 65537, NULL, NULL);
    if(key == NULL){
            print_error("generate key", ERR_get_error());
            return -1;
    }

    if(!write_public_key(path, key))
            return -1;

    if(!write_private_key(path, key))
            return -1;

    RSA_free(key);

    return 0;
</code></pre>

<p>}
```</p>

<p>毎回ファイルを読まなければならない</p>

<p>外部でグローバルの変数を用意しているところ</p>

<p>```c
typedef struct {</p>

<pre><code>    RSA *my_private;
    RSA *my_public;
    RSA **publics;
    char **key_ids;
    char **key_path;
    size_t n_public;
</code></pre>

<p>}KEYS;</p>

<p>KEYS keys;</p>

<p>extern RSA <em>get_my_private_key(keys);
extern RSA </em>get_my_public_key(keys);
extern RSA <em>get_publib_key_from_id(char </em>id);
```</p>

<p>暗号化の手順は
<code>c
get_all_keys();
public_encrypt(const char *key_id, const char *from, int data_len);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascriptでの公開鍵暗号化と復号化]]></title>
    <link href="http://guofei.github.com/master_report/blog/2012/07/20/javascriptdefalsegong-kai-jian-an-hao-hua-tofu-hao-hua/"/>
    <updated>2012-07-20T02:57:00+09:00</updated>
    <id>http://guofei.github.com/master_report/blog/2012/07/20/javascriptdefalsegong-kai-jian-an-hao-hua-tofu-hao-hua</id>
    <content type="html"><![CDATA[<h3>javascriptで暗号化ができて、復号化ができないバッグを修正した</h3>

<p><code>
エラー:malformed UTF-8 character sequence at offset
</code>
cとjavascriptでの型変換がうまくいかないと思ったが、cの関数の戻り値がutf-8の文字コード以外に別のものが入っている。</p>

<h3>sourcecode</h3>

<p>```js
Components.utils.import('resource://gre/modules/ctypes.jsm');
var r = ctypes.open('/Users/kaku/Programs/M2/ctypesrsa/components/libjsrsa.dylib');</p>

<p>var encrypt = r.declare('public_encrypt', ctypes.default_abi, ctypes.char.ptr, ctypes.char.ptr, ctypes.uint32_t, ctypes.char.ptr, ctypes.uint32_t);
var ciphertext = encrypt(pubkey, pubkey.length, 'abc', 'abc'.length).readString();
alert(ciphertext);</p>

<p>var decrypt = r.declare('private_decrypt', ctypes.default_abi, ctypes.unsigned_char.ptr, ctypes.unsigned_char.ptr, ctypes.uint32_t, ctypes.unsigned_char.ptr, ctypes.uint32_t);
var text = decrypt(pkey, pkey.length, ciphertext, ciphertext.length).readString();
alert(text);
```</p>

<p>```c
char<em> str_join(const char</em> a, const char* b)
{</p>

<pre><code>    if(a == NULL &amp;&amp; b == NULL)
            return NULL;

    size_t la = 0;
    if(a)
            la = strlen(a);

    size_t lb = 0;
    if(b)
            lb = strlen(b);

    char* p = malloc(la + lb + 1);
    memcpy(p, a, la);
    memcpy(p + la, b, lb + 1);
    return p;
</code></pre>

<p>}</p>

<p>char<em> public_encrypt(const char </em>pubkey, int key_len, const char *from, int from_len)
{</p>

<pre><code>    BIO *key_mem = BIO_new_mem_buf(pubkey, key_len);
    RSA *key = PEM_read_bio_RSAPublicKey(key_mem, NULL, NULL, NULL);
    BIO_free(key_mem);

    BIO *plaintext_mem = BIO_new_mem_buf(from, from_len);

    BIO *ciphertext_mem = BIO_new(BIO_s_mem());
    BIO *bio_base64 = BIO_new(BIO_f_base64());
    BIO_set_flags(bio_base64, BIO_FLAGS_BASE64_NO_NL);
    BIO *bio_chain = BIO_push(bio_base64, ciphertext_mem);

    int rsa_size = RSA_size(key);
    char *inbuf = malloc(rsa_size);
    char *outbuf = malloc(rsa_size);
    while(1){
            int read_size = rsa_size - 11;
            int inlen = BIO_read(plaintext_mem, inbuf, read_size);
            if(inlen &lt;= 0)
                    break;

            memset(outbuf, 0, rsa_size);

            int outlen;
            if((outlen = RSA_public_encrypt(inlen, inbuf, outbuf, key, RSA_PKCS1_PADDING)) == -1){
                    print_error("failed to RSA_public_encrypt", ERR_get_error());
                    exit(-1);
            }

            int len = BIO_write(bio_chain, outbuf, outlen);
            int abc = 1;
    }
    BIO_flush(bio_chain);
    free(inbuf);
    free(outbuf);
    BIO_free(plaintext_mem);
    RSA_free(key);

    char *ciphertext = NULL;
    while(1){
            int read_size = 512;
            char *buf = calloc(read_size + 1, sizeof(char));
            int len = BIO_read(ciphertext_mem, buf, read_size);
            if(len &lt;= 0)
                    break;
            ciphertext = str_join(ciphertext, buf);
    }
    BIO_free_all(bio_chain);

    return ciphertext;
</code></pre>

<p>}</p>

<p>char<em> private_decrypt(const char </em>prikey, int key_len, const char *from, int from_len)
{</p>

<pre><code>    BIO *key_mem = BIO_new(BIO_s_mem());
    int len = BIO_write(key_mem, prikey, key_len);
    RSA *key = PEM_read_bio_RSAPrivateKey(key_mem, NULL, NULL, NULL);
    BIO_free(key_mem);

    BIO *bio_base64 = BIO_new(BIO_f_base64());
    BIO_set_flags(bio_base64, BIO_FLAGS_BASE64_NO_NL);
    BIO *mem_buf = BIO_new_mem_buf(from, from_len);
    mem_buf = BIO_push(bio_base64, mem_buf);

    BIO *plaintext_mem = BIO_new(BIO_s_mem());
    int plaintext_len = 0;
    int rsa_size = RSA_size(key);

    char *inbuf = malloc(rsa_size);
    char *outbuf = malloc(rsa_size);
    while(1){
            int read_size = rsa_size;
            int inlen = BIO_read(mem_buf, inbuf, read_size);
            if(inlen &lt;= 0)
                    break;

            memset(outbuf, 0, rsa_size);

            int outlen;
            if((outlen = RSA_private_decrypt(inlen, inbuf, outbuf, key, RSA_PKCS1_PADDING)) == -1){
                    print_error("failed to RSA_private_decrypt", ERR_get_error());
                    exit(-1);
            }
            int len = BIO_write(plaintext_mem, outbuf, outlen);
            plaintext_len += len;
    }
    BIO_flush(plaintext_mem);
    free(inbuf);
    free(outbuf);
    BIO_free_all(mem_buf);
    RSA_free(key);

    char *plaintext = NULL;
    while(1){
            int read_size = 512;
            char *buf = calloc(read_size + 1, sizeof(char));
            int len = BIO_read(plaintext_mem, buf, read_size);
            if(len &lt;= 0)
                    break;
            plaintext = str_join(plaintext, buf);
    }
    BIO_free(plaintext_mem);

    return plaintext;
</code></pre>

<p>}
```</p>

<h3>これから</h3>

<p>署名などの機能を実現する。
CSセミナの発表資料を準備する</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js ctypes]]></title>
    <link href="http://guofei.github.com/master_report/blog/2012/07/12/js-ctypes/"/>
    <updated>2012-07-12T20:50:00+09:00</updated>
    <id>http://guofei.github.com/master_report/blog/2012/07/12/js-ctypes</id>
    <content type="html"><![CDATA[<h3>OpenSSLの本</h3>

<p>BIO部分：入出力の抽象化、暗号化や符号化,ファイルやネットワークといった入出力の詳細をアプリケーションから隠蔽する</p>

<h3>Ctypes</h3>

<p>firefoxのdebugツールでエラーを見た
var r = ctypes.open('/Users/kaku/ctypesrsa/components/libjsrsa.dylib');
エラー: couldn't open library</p>

<p>自分が書いたものが問題になるのかを確認するため、簡単なライブラリを書いた。</p>

<p>mytest.h
```</p>

<h1>ifndef <em>MYTEST_H</em></h1>

<h1>define <em>MYTEST_H</em></h1>

<p>int my_add(int a, int b);</p>

<h1>endif /<em> <em>MYTEST_H</em> </em>/</h1>

<p>```</p>

<p>mytest.c
```</p>

<h1>include "mytest.h"</h1>

<p>int my_add(int a, int b)
{</p>

<pre><code>    return a+b;
</code></pre>

<p>}
<code>
</code>
cc -dynamiclib mytest.c -o libmytest.dylib
```</p>

<p>macのgccは　llvm-gcc　なので、gccを入れて、もう一回コンパイルしたが、同じエラーになる。Xcodeでコンパイルしても、同じ
<code>
gcc-4.2 -dynamiclib mytest.c -o libmytest.dylib
</code></p>

<p>このURLで<a href="http://stackoverflow.com/questions/9348604/build-a-dll-to-be-used-by-mozilla-js-ctype">http://stackoverflow.com/questions/9348604/build-a-dll-to-be-used-by-mozilla-js-ctype</a>s同じような問題があった。windowsでライブラリを開く時、システムのライブラリだとうまく使えるが、自分が書いたライブラリは使えない。</p>

<p>以下のコードを追加すると、うまく実行できたらしい。DLLMainはダイナミックリンクライブラリためのエントリーポイント。
<code>
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  return TRUE;
}
</code></p>

<p>Mac OS XでDLLMain見たいなものがないらしいので、やめた。Linuxで試して、うまく利用できた。</p>

<p>今はライブラリを書いている。javascriptとCの間の型の変換の部分は少し複雑</p>
]]></content>
  </entry>
  
</feed>
