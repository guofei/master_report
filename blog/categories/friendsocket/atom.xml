<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: friendsocket | Master Report]]></title>
  <link href="http://guofei.github.com/master_report/blog/categories/friendsocket/atom.xml" rel="self"/>
  <link href="http://guofei.github.com/master_report/"/>
  <updated>2012-11-12T16:33:09+09:00</updated>
  <id>http://guofei.github.com/master_report/</id>
  <author>
    <name><![CDATA[kaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FriendSocket]]></title>
    <link href="http://guofei.github.com/master_report/blog/2012/11/12/friendsocket/"/>
    <updated>2012-11-12T14:03:00+09:00</updated>
    <id>http://guofei.github.com/master_report/blog/2012/11/12/friendsocket</id>
    <content type="html"><![CDATA[<h3>FriendSocketのコンタクトリスト問題の修正</h3>

<p>前はeventでコンタクトリストを取得した
<code>js
s.on_get_friend = function(list){};
</code></p>

<p>少し不便だと思って、以下のようにした
```js
s = friendsocketio.listen(host, name, password, appname);</p>

<pre><code>var list = s.contactlist();
s.on("connection", function(friend) {
</code></pre>

<p>});
```</p>

<p>しかし、xmppからのデータがいつに来るかどうかわからないので、listがほとんど何にも取得できない</p>

<pre><code>    .
     xmpp                       friendsocket
      |                             |
      |                             |
   onlogined                        |
      |                             |
      |          list               |
   ongetlist    ------&gt;             |
      |                             |s.contactlist = list
      |                             |
   onconnectmessage       ---&gt;      |
                                onconnect
</code></pre>

<p>以下のように書かなければならない
```js
s = friendsocketio.listen(host, name, password, appname);
s.on("connection", function(friend) {</p>

<pre><code>var list = s.contactlist();
</code></pre>

<p>});
```</p>

<h3>os研究会</h3>

<p>プレゼンテーションを作っている。しかし、今回は２人分のものを発表するので、青沼さんの研究内容どういう風に発表すればいいかわからない。青沼さんのcsセミナーのものを使えるかどうか。発表内容のページごとに誰の研究かをきちんと区別する必要があるか。</p>

<h3>来週</h3>

<p>friendsocketの暗号化の部分と組み合わせる。<br/>
発表内容を書く。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FriendSocketをweb pageからの利用]]></title>
    <link href="http://guofei.github.com/master_report/blog/2012/11/05/friendsocketwoweb-pagekarafalseli-yong/"/>
    <updated>2012-11-05T15:04:00+09:00</updated>
    <id>http://guofei.github.com/master_report/blog/2012/11/05/friendsocketwoweb-pagekarafalseli-yong</id>
    <content type="html"><![CDATA[<h3>webページから利用できるようになった</h3>

<p>カスタム DOM イベントを利用する</p>

<p>```html</p>

<script type="text/javascript" src="path/to/callextension.js"></script>


<script>
client_test = function() {
    var friend;
    friend = friendsocketio.connect(host, "client@kaku-desktop.softlab.cs.tsukuba.ac.jp", "client", "server@kaku-desktop.softlab.cs.tsukuba.ac.jp", "app2");
    friend.on("connect", function(m) {
        friend.emit("event", "hello server 2");
    });
    friend.on("disconnect", function(m) {
        alert("disconnected by server");
    });
};
CallExtension(client_test);
</script>


<p>```</p>

<p>callextension.js
```js
function CallExtension(f)
{</p>

<pre><code>var element = document.createElement("MyExtensionDataElement");
element.setAttribute("attribute1", f);
element.setAttribute("attribute2", "hello world");
document.documentElement.appendChild(element);
var evt = document.createEvent("Events");
evt.initEvent("MyExtensionEvent", true, false);
element.dispatchEvent(evt);
</code></pre>

<p>}
```</p>

<h4>問題</h4>

<p>アドオン側でclienttest関数の文字列を取得し、eval()で実行している。普通のJavaScriptで実行できないもの（アドオンの機能など）をclienttest()で書いてアドオンに送ると実行出来るようになる。さらに、XPCOMのモジュールのコードをclienttest関数で書いて、アドオンに送ると、ファイルなどのアクセスも出来る。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendsocket APIの修正]]></title>
    <link href="http://guofei.github.com/master_report/blog/2012/10/01/friendsocket-apifalsexiu-zheng/"/>
    <updated>2012-10-01T14:16:00+09:00</updated>
    <id>http://guofei.github.com/master_report/blog/2012/10/01/friendsocket-apifalsexiu-zheng</id>
    <content type="html"><![CDATA[<h3>Socket IOに似たようなAPIを書き換えた</h3>

<p>socket io
```js
var socket = io.connect('http://localhost');</p>

<pre><code>socket.on('news', function (data) {
    console.log(data);
    socket.emit('my other event', { my: 'data' });
</code></pre>

<p>});
io.sockets.on('connection', function (socket) {</p>

<pre><code>socket.emit('news', { hello: 'world' });
socket.on('my other event', function (data) {
    console.log(data);
});
</code></pre>

<p>});
```</p>

<p>friendsocket</p>

<p>クライアントのイベント：connect</p>

<p>サーバのイベント:connection,disconnect</p>

<p>複数のクライアントからの接続
```js
client_test1_1 = function() {</p>

<pre><code>var friend;
friend = friendsocketio.connect("client@kaku-desktop.softlab.cs.tsukuba.ac.jp", "client", "server@kaku-desktop.softlab.cs.tsukuba.ac.jp", "app1", "kaku-desktop.softlab.cs.tsukuba.ac.jp");
friend.on("connect", function(m) {
    friend.on("all", function(m) {
        alert(m);
    });
    friend.emit("event", "hello server 1");
</code></pre>

<p>  });
};</p>

<p>client_test1_2 = function() {</p>

<pre><code>var friend;
friend = friendsocketio.connect("client2@kaku-desktop.softlab.cs.tsukuba.ac.jp", "client2", "server@kaku-desktop.softlab.cs.tsukuba.ac.jp", "app1", "kaku-desktop.softlab.cs.tsukuba.ac.jp");
//接続が行った時
friend.on("connect", function(m) {
    //"all"イベントを作成
    friend.on("all", function(m) {
        alert(m);
    });
});
</code></pre>

<p>};
server_test1 = function() {</p>

<pre><code>var server;
server = friendsocketio.listen("server@kaku-desktop.softlab.cs.tsukuba.ac.jp", "server", "app1", "kaku-desktop.softlab.cs.tsukuba.ac.jp");
//server.on("connection", function(friend)){}のほうが良い？？
server.friends.on("connection", function(friend) {
    //"event"イベントを作成
    friend.on("event", function(data, name) {
        //全てのユーザに送信
        server.friends.emit("all", "hello everyone");
        alert(name);
        alert(data);
    });
});
</code></pre>

<p>};
```</p>

<p>複数のサーバを起動する
```js
client_test2 = function() {</p>

<pre><code>var friend;
friend = friendsocketio.connect("client@kaku-desktop.softlab.cs.tsukuba.ac.jp", "client", "server@kaku-desktop.softlab.cs.tsukuba.ac.jp", "app2", "kaku-desktop.softlab.cs.tsukuba.ac.jp");
friend.on("connect", function(m) {
    friend.emit("event", "hello server 2");
    //close
    friend.close();
});
</code></pre>

<p>};</p>

<p>server_test2 = function() {</p>

<pre><code>var server;
server = friendsocketio.listen("server@kaku-desktop.softlab.cs.tsukuba.ac.jp", "server", "app2", "kaku-desktop.softlab.cs.tsukuba.ac.jp");
server.friends.on("connection", function(friend) {
    friend.on("event", function(data, name) {
        alert(data);
        alert(name);
    });
    //接続が切れた時
    friend.on("disconnect", function(m) {
        alert("user disconnected");
    });
});
</code></pre>

<p>};
```</p>

<h3>環境</h3>

<h4>firefox 3.6,xmpp4moz</h4>

<p>voyagerの/Users/kaku/Public/firefox 3.6 linux mac xmpp4moz/</p>

<h4>xmppサーバ</h4>

<p>研究室の中しかアクセスできないxmppサーバをたてた。</p>

<p>username:client@kaku-desktop.softlab.cs.tsukuba.ac.jp password:client<br/>
username:client2@..., password:client2<br/>
username:server@..., password:server など</p>

<p>管理画面：
http://kaku-desktop.softlab.cs.tsukuba.ac.jp:9090/</p>

<p>ユーザ名：admin　パースワード:admin</p>
]]></content>
  </entry>
  
</feed>
